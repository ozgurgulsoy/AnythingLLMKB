@model TestKB.ViewModels.EditContentViewModel

@{
    ViewData["Title"] = "İçerik Düzenle";
    Layout = "_Layout";
    var allItemsJson = ViewBag.AllItemsJson as string ?? "[]";
    var successMessage = TempData["SuccessMessage"] as string;
}

<div class="container mt-4 mb-5">
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @successMessage
            <button type="button" class="close" data-dismiss="alert" aria-label="Kapat">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    }

    <h2 class="mb-4">İçerik Düzenle</h2>

    <div class="row">
        <div class="col-lg-4 col-md-6 mb-4">
            <div class="card shadow-sm h-100">
                <div class="card-header text-white bg-success">
                    <i class="fa fa-plus-circle mr-2"></i> Sıfırdan Yeni İçerik Ekle
                </div>
                <div class="card-body">
                    <form asp-action="EditNewContent" method="post" id="newContentForm">
                        @Html.AntiForgeryToken()
                        <div class="form-group">
                            <label asp-for="NewContent.Category" class="font-weight-bold">Yeni Kategori</label>
                            <input asp-for="NewContent.Category" class="form-control" id="newCategory" placeholder="Kategori ismi giriniz" />
                            <span id="newCategoryError" class="text-danger"></span>
                        </div>
                        <div class="form-group">
                            <label asp-for="NewContent.SubCategory" class="font-weight-bold">Yeni Alt Kategori</label>
                            <input asp-for="NewContent.SubCategory" class="form-control" id="newSubCategory" placeholder="Alt kategori ismi giriniz" />
                            <span id="newSubCategoryError" class="text-danger"></span>
                        </div>
                        <div class="form-group">
                            <label asp-for="NewContent.Content" class="font-weight-bold">İçerik</label>
                            <textarea asp-for="NewContent.Content" class="form-control" id="newContent" rows="5" placeholder="İçerik giriniz"></textarea>
                            <span id="newContentError" class="text-danger"></span>
                        </div>
                        <button type="submit" class="btn btn-light border-success text-success">
                            <i class="fa fa-check mr-1"></i> Yeni İçerik Ekle
                        </button>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-lg-4 col-md-6 mb-4">
            <div class="card shadow-sm h-100">
                <div class="card-header text-white bg-primary">
                    <i class="fa fa-edit mr-2"></i> Var Olan İçeriği Düzenle
                </div>
                <div class="card-body">
                    <form asp-action="ExtendContent" method="post" id="extendContentForm">
                        @Html.AntiForgeryToken()
                        <div class="form-group">
                            <label for="selectedCategory" class="font-weight-bold">Mevcut Kategori Seç</label>
                            <div class="input-group">
                                <select asp-for="ExtendContent.SelectedCategory" class="form-control" id="selectedCategory" onchange="onCategoryChange()">
                                    <option value="">Kategori seçiniz</option>
                                    @if (Model.ExistingCategories != null)
                                    {
                                        foreach (var cat in Model.ExistingCategories)
                                        {
                                            var isSelected = cat.Equals(Model.ExtendContent.SelectedCategory ?? "", StringComparison.OrdinalIgnoreCase);
                                            <option value="@cat" selected="@(isSelected ? "selected" : null)">@cat</option>
                                        }
                                    }
                                </select>
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-outline-secondary" id="editCategoryBtn" onclick="toggleEditCategory()" style="display:none;" title="Kategoriyi Düzenle">
                                        <i class="fa fa-pencil"></i>
                                    </button>
                                </div>
                            </div>
                            <span class="text-danger" id="editCategoryError"></span>
                        </div>

                        <div class="form-group" id="editCategoryDiv" style="display:none;">
                            <div class="input-group">
                                <input type="text" class="form-control" id="editedCategory" name="ExtendContent.EditedCategory" placeholder="Yeni kategori ismi giriniz" />
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary" onclick="saveEditedCategory()">
                                        Kaydet
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="selectedSubCategory" class="font-weight-bold">Mevcut Alt Kategori Seç</label>
                            <div class="input-group">
                                <select asp-for="ExtendContent.SelectedSubCategory" class="form-control" id="selectedSubCategory" onchange="onSubCategoryChange()">
                                    <option value="">Alt kategori seçiniz</option>
                                </select>
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-outline-secondary" id="editSubCategoryBtn" onclick="toggleEditSubCategory()" style="display:none;" title="Alt Kategoriyi Düzenle">
                                        <i class="fa fa-pencil"></i>
                                    </button>
                                </div>
                            </div>
                            <span class="text-danger" id="editSubCategoryError"></span>
                        </div>

                        <div class="form-group" id="editSubCategoryDiv" style="display:none;">
                            <div class="input-group">
                                <input type="text" class="form-control" id="editedSubCategory" name="ExtendContent.EditedSubCategory" placeholder="Yeni alt kategori ismi giriniz" />
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary" onclick="saveEditedSubCategory()">
                                        Kaydet
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div class="form-group" id="contentDiv" style="display:none;">
                            <label asp-for="ExtendContent.Content" class="font-weight-bold">İçerik</label>
                            <textarea asp-for="ExtendContent.Content" class="form-control" id="extendContent" rows="5" placeholder="İçerik ekleyiniz"></textarea>
                            <span id="extendContentError" class="text-danger"></span>
                        </div>

                        <button type="submit" class="btn btn-light border-primary text-primary" id="submitContentBtn" style="display:none;">
                            <i class="fa fa-upload mr-1"></i> İçerik Güncelle
                        </button>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-lg-4 col-md-12 mb-4">
            <div class="card shadow-sm h-100">
                <div class="card-header text-white bg-danger">
                    <i class="fa fa-trash mr-2"></i> Kategori Sil
                </div>
                <div class="card-body">
                    <div class="form-group">
                        <label for="deleteCategorySelect" class="font-weight-bold">Silinecek Kategori</label>
                        <select id="deleteCategorySelect" class="form-control">
                            <option value="">Kategori seçiniz</option>
                            @if (Model.ExistingCategories != null)
                            {
                                foreach (var cat in Model.ExistingCategories)
                                {
                                    <option value="@cat">@cat</option>
                                }
                            }
                        </select>
                        <span class="text-danger" id="deleteCategoryError"></span>
                    </div>

                    <button type="button" class="btn btn-light border-danger text-danger" onclick="confirmDeleteCategory()">
                        <i class="fa fa-trash mr-1"></i> Kategori Sil
                    </button>

                    <div id="inlineDeleteConfirm" class="mt-2" style="display:none;">
                        <span class="text-danger font-weight-bold">Bu kategoriyi silmek istediğinize emin misiniz?&nbsp;</span>
                        <button type="button" class="btn btn-sm btn-danger" onclick="deleteCategory()">Evet</button>
                        <button type="button" class="btn btn-sm btn-secondary" onclick="cancelDelete()">Hayır</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let oldCategoryValue = "";
        let oldSubCategoryValue = "";
        let allItems = @Html.Raw(allItemsJson);
        function setErrorText(elementId, message) {
            document.getElementById(elementId).textContent = message;
        }
        function refreshAllItems(callback) {
            fetch('/Home/GetContentItems')
                .then(res => res.json())
                .then(updatedItems => {
                    allItems = updatedItems;
                    if (callback) callback();
                })
                .catch(error => console.error("Öğeler yenilenirken hata oluştu:", error));
        }
        document.addEventListener('DOMContentLoaded', function () {
            const newContentForm = document.getElementById('newContentForm');
            newContentForm.addEventListener('submit', function (evt) {
                setErrorText('newCategoryError', '');
                setErrorText('newSubCategoryError', '');
                setErrorText('newContentError', '');
                let hasError = false;
                const newCategory = document.getElementById('newCategory').value.trim();
                const newSubCategory = document.getElementById('newSubCategory').value.trim();
                const newContent = document.getElementById('newContent').value.trim();
                if (!newCategory) {
                    setErrorText('newCategoryError', 'Kategori boş bırakılamaz.');
                    hasError = true;
                }
                if (!newSubCategory) {
                    setErrorText('newSubCategoryError', 'Alt kategori boş bırakılamaz.');
                    hasError = true;
                }
                if (!newContent) {
                    setErrorText('newContentError', 'İçerik boş bırakılamaz.');
                    hasError = true;
                }
                const existingCategoryOptions = document.querySelectorAll('#selectedCategory option');
                let duplicateFound = false;
                existingCategoryOptions.forEach(opt => {
                    if (opt.value && opt.value.trim().toLowerCase() === newCategory.toLowerCase()) {
                        duplicateFound = true;
                    }
                });
                if (duplicateFound) {
                    setErrorText('newCategoryError', 'Bu kategori zaten mevcut.');
                    hasError = true;
                }
                if (hasError) {
                    evt.preventDefault();
                }
            });
            const extendContentForm = document.getElementById('extendContentForm');
            extendContentForm.addEventListener('submit', function (event) {
                setErrorText('extendContentError', '');
                let contentField = document.getElementById('extendContent');
                if (!contentField.value.trim()) {
                    setErrorText('extendContentError', "İçerik boş bırakılamaz.");
                    event.preventDefault();
                    contentField.classList.add('is-invalid');
                } else {
                    contentField.classList.remove('is-invalid');
                }
            });
        });
        const categorySelect = document.getElementById('selectedCategory');
        const subCategorySelect = document.getElementById('selectedSubCategory');
        const extendContentBox = document.getElementById('extendContent');
        function onCategoryChange() {
            setErrorText('editCategoryError', '');
            oldCategoryValue = categorySelect.value;
            refreshAllItems(() => {
                document.getElementById('editCategoryBtn').style.display = categorySelect.value ? 'block' : 'none';
                populateSubCategories(categorySelect.value);
                subCategorySelect.value = "";
                document.getElementById('editSubCategoryBtn').style.display = 'none';
                document.getElementById('contentDiv').style.display = 'none';
                document.getElementById('submitContentBtn').style.display = 'none';
            });
        }
        function toggleEditCategory() {
            const editDiv = document.getElementById('editCategoryDiv');
            if (editDiv.style.display === 'none') {
                document.getElementById('editedCategory').value = categorySelect.value;
                editDiv.style.display = 'block';
            } else {
                editDiv.style.display = 'none';
            }
        }
        function saveEditedCategory() {
            setErrorText('editCategoryError', '');
            const newCategory = document.getElementById('editedCategory').value.trim();
            if (!newCategory) {
                setErrorText('editCategoryError', "Kategori ismi boş olamaz.");
                return;
            }
            for (let i = 0; i < categorySelect.options.length; i++) {
                if (categorySelect.options[i].value === categorySelect.value) {
                    categorySelect.options[i].text = newCategory;
                    categorySelect.options[i].value = newCategory;
                    break;
                }
            }
            categorySelect.value = newCategory;
            document.getElementById('editCategoryDiv').style.display = 'none';
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            fetch('/Home/UpdateCategory', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ OldCategory: oldCategoryValue, NewCategory: newCategory })
            })
            .then(response => response.json())
            .then(data => {
                if (!data.success) {
                    setErrorText('editCategoryError', data.message || "Kategori güncelleme hatası.");
                } else {
                    oldCategoryValue = newCategory;
                    refreshAllItems(() => {
                        populateSubCategories(newCategory);
                    });
                }
            })
            .catch(error => {
                setErrorText('editCategoryError', "Kategori güncellenirken bir hata oluştu.");
            });
        }
        function populateSubCategories(category) {
            while (subCategorySelect.options.length > 1) {
                subCategorySelect.remove(1);
            }
            if (!category) {
                return;
            }
            let subcats = new Set();
            allItems.forEach(item => {
                if (item.category && item.category.trim().toLowerCase() === category.trim().toLowerCase()) {
                    subcats.add(item.subCategory ? item.subCategory.trim() : "");
                }
            });
            const subcatArr = Array.from(subcats).sort();
            subcatArr.forEach(subcat => {
                let opt = document.createElement('option');
                opt.value = subcat;
                opt.textContent = subcat;
                subCategorySelect.appendChild(opt);
            });
        }
        function onSubCategoryChange() {
            setErrorText('editSubCategoryError', '');
            oldSubCategoryValue = subCategorySelect.value;
            if (subCategorySelect.value) {
                document.getElementById('editSubCategoryBtn').style.display = 'block';
                let matches = allItems.filter(item =>
                    item.category.toLowerCase() === categorySelect.value.toLowerCase() &&
                    item.subCategory.toLowerCase() === subCategorySelect.value.toLowerCase()
                );
                extendContentBox.value = matches.length > 0 ? matches[0].content : "";
                document.getElementById('contentDiv').style.display = 'block';
                document.getElementById('submitContentBtn').style.display = 'block';
            } else {
                document.getElementById('editSubCategoryBtn').style.display = 'none';
                document.getElementById('contentDiv').style.display = 'none';
                document.getElementById('submitContentBtn').style.display = 'none';
            }
        }
        function toggleEditSubCategory() {
            const editDiv = document.getElementById('editSubCategoryDiv');
            if (editDiv.style.display === 'none') {
                document.getElementById('editedSubCategory').value = subCategorySelect.value;
                editDiv.style.display = 'block';
            } else {
                editDiv.style.display = 'none';
            }
        }
        function saveEditedSubCategory() {
            setErrorText('editSubCategoryError', '');
            const newSubCategory = document.getElementById('editedSubCategory').value.trim();
            if (!newSubCategory) {
                setErrorText('editSubCategoryError', "Alt kategori ismi boş olamaz.");
                return;
            }
            for (let i = 0; i < subCategorySelect.options.length; i++) {
                if (subCategorySelect.options[i].value === subCategorySelect.value) {
                    subCategorySelect.options[i].text = newSubCategory;
                    subCategorySelect.options[i].value = newSubCategory;
                    break;
                }
            }
            subCategorySelect.value = newSubCategory;
            document.getElementById('editSubCategoryDiv').style.display = 'none';
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            fetch('/Home/UpdateSubCategory', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({
                    Category: categorySelect.value,
                    OldSubCategory: oldSubCategoryValue,
                    NewSubCategory: newSubCategory
                })
            })
            .then(response => response.json())
            .then(data => {
                if (!data.success) {
                    setErrorText('editSubCategoryError', data.message || "Alt kategori güncelleme hatası.");
                } else {
                    oldSubCategoryValue = newSubCategory;
                    refreshAllItems(() => {
                        populateSubCategories(categorySelect.value);
                    });
                }
            })
            .catch(error => {
                setErrorText('editSubCategoryError', "Alt kategori güncellenirken bir hata oluştu.");
            });
        }
        function confirmDeleteCategory() {
            setErrorText('deleteCategoryError', '');
            const category = document.getElementById('deleteCategorySelect').value;
            if (!category) {
                setErrorText('deleteCategoryError', "Lütfen silinecek kategoriyi seçiniz.");
                return;
            }
            document.getElementById('inlineDeleteConfirm').style.display = 'block';
        }
        function cancelDelete() {
            document.getElementById('inlineDeleteConfirm').style.display = 'none';
        }
        function deleteCategory() {
            const select = document.getElementById('deleteCategorySelect');
            const category = select.value;
            document.getElementById('inlineDeleteConfirm').style.display = 'none';
            setErrorText('deleteCategoryError', '');
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            fetch('/Home/DeleteCategory', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ Category: category })
            })
            .then(response => response.json())
            .then(data => {
                if (!data.success) {
                    setErrorText('deleteCategoryError', data.message || "Kategori silinirken hata oluştu.");
                } else {
                    const alertDiv = document.createElement('div');
                    alertDiv.className = "alert alert-success alert-dismissible fade show";
                    alertDiv.role = "alert";
                    alertDiv.innerHTML = "Kategori silindi." +
                        '<button type="button" class="close" data-dismiss="alert" aria-label="Kapat">' +
                        '<span aria-hidden="true">&times;</span></button>';
                    document.querySelector('.container').insertBefore(alertDiv, document.querySelector('.container').firstChild);
                    setTimeout(() => {
                        location.reload();
                    }, 2000);
                }
            })
            .catch(error => {
                setErrorText('deleteCategoryError', "Kategori silinirken bir hata oluştu.");
            });
        }
        document.addEventListener('DOMContentLoaded', function () {
            const successAlert = document.querySelector('.alert-success');
            if (successAlert) {
                const text = successAlert.textContent;
                if (text.includes("İçerik eklendi") || text.includes("İçerik güncellendi")) {
                    setTimeout(() => {
                        location.reload();
                    }, 2000);
                }
            }
        });
        if (categorySelect && categorySelect.value) {
            populateSubCategories(categorySelect.value);
            var preselectedSub = "@Model.ExtendContent.SelectedSubCategory";
            if (preselectedSub) {
                subCategorySelect.value = preselectedSub;
                onSubCategoryChange();
            }
        }
    </script>
}
